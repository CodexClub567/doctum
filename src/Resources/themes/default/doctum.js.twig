{% from _self import element %}

{% macro add_class_methods_index(class, prettyJsonOptions) %}
    {% if class.methods %}
        {% set from_link = class_path(class) %}
        {% for meth in class.methods %}
            {{-
                {
                    type: 'Method'|trans,
                    fromName: class.name,
                    fromLink: from_link,
                    link: method_path(meth),
                    name: meth.__toString(),
                    doc: meth.shortdesc|desc(class)|md_to_html,
                }|json_encode(prettyJsonOptions)|raw
            -}},
        {% endfor %}
    {% endif %}
{% endmacro %}

(function(root) {

    var bhIndex = null;
    var rootPath = '';
    var treeJson = {{ tree|raw }};

    var searchTypeClasses = {
        '{{ 'Namespace'|trans|escape('js') }}': 'label-default',
        '{{ 'Class'|trans|escape('js') }}': 'label-info',
        '{{ 'Interface'|trans|escape('js') }}': 'label-primary',
        '{{ 'Trait'|trans|escape('js') }}': 'label-success',
        '{{ 'Method'|trans|escape('js') }}': 'label-danger',
        '_': 'label-warning'
    };

    var searchIndex = [
        {% from _self import add_class_methods_index %}
        {% set prettyJsonOptions = constant('JSON_UNESCAPED_SLASHES') b-or constant('JSON_UNESCAPED_UNICODE') %}
        {% for ns in namespaces -%}
            {{-
                {
                    type: 'Namespace'|trans,
                    link: namespace_path(ns),
                    name: ns,
                    doc: 'Namespace %s'|format(ns),
                }|json_encode(prettyJsonOptions)|raw
            -}},
        {%- endfor %}
        {% for class in interfaces -%}
            {% set interface = {
                        type: 'Interface'|trans,
                        link: class_path(class),
                        name: class.name,
                        doc: class.shortdesc|desc(class)|md_to_html,
            } %}
            {% if class.namespace %}
                {% set interface = {
                        type: interface.type,
                        fromName: class.namespace,
                        fromLink: namespace_path(class.namespace),
                        link: interface.link,
                        name: interface.name,
                        doc: interface.doc,
                } %}
             {% endif %}
            {{-
                interface|json_encode(prettyJsonOptions)|raw
            -}},
            {{ add_class_methods_index(class, prettyJsonOptions) }}
        {% endfor %}
        {% for class in classes -%}
            {% set classOrTrait = {
                        type: class.isTrait ? 'Trait'|trans : 'Class'|trans,
                        link: class_path(class),
                        name: class.name,
                        doc: class.shortdesc|desc(class)|md_to_html,
            } %}
            {% if class.namespace %}
                {% set classOrTrait = {
                        type: classOrTrait.type,
                        fromName: class.namespace,
                        fromLink: namespace_path(class.namespace),
                        link: classOrTrait.link,
                        name: classOrTrait.name,
                        doc: classOrTrait.doc,
                } %}
            {% endif %}
            {{-
                classOrTrait|json_encode(prettyJsonOptions)|raw
            -}},
            {{ add_class_methods_index(class, prettyJsonOptions) }}
        {% endfor %}
        {% for function in functions -%}
            {{-
                {
                    type: 'Function'|trans,
                    link: function_path(function),
                    name: function.__toString(),
                    doc: function.shortdesc|desc(function)|md_to_html,
                }|json_encode(prettyJsonOptions)|raw
            -}},
        {% endfor %}
        {# Override this block, search_index_extra, to add custom search entries! #}
        {% block search_index_extra '' %}
        // Fix trailing commas in the index
        {}
    ];

    /** Tokenizes strings by namespaces and functions */
    function tokenizer(term) {
        if (!term) {
            return [];
        }

        var tokens = [term];
        var meth = term.indexOf('::');

        // Split tokens into methods if "::" is found.
        if (meth > -1) {
            tokens.push(term.substr(meth + 2));
            term = term.substr(0, meth - 2);
        }

        // Split by namespace or fake namespace.
        if (term.indexOf('\\') > -1) {
            tokens = tokens.concat(term.split('\\'));
        } else if (term.indexOf('_') > 0) {
            tokens = tokens.concat(term.split('_'));
        }

        // Merge in splitting the string by case and return
        tokens = tokens.concat(term.match(/(([A-Z]?[^A-Z]*)|([a-z]?[^a-z]*))/g).slice(0,-1));

        return tokens;
    };

    root.Doctum = {
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        cleanSearchTerm: function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        },

        /** Searches through the index for a given term */
        search: function(term) {
            // Create a new search index if needed
            if (!bhIndex) {
                bhIndex = new Bloodhound({
                    limit: 500,
                    local: searchIndex,
                    datumTokenizer: function (d) {
                        return tokenizer(d.name);
                    },
                    queryTokenizer: Bloodhound.tokenizers.whitespace
                });
                bhIndex.initialize();
            }

            results = [];
            bhIndex.get(term, function(matches) {
                results = matches;
            });

            if (!rootPath) {
                return results;
            }

            // Fix the element links based on the current page depth.
            return $.map(results, function(ele) {
                if (ele.link.indexOf('..') > -1) {
                    return ele;
                }
                ele.link = rootPath + ele.link;
                if (ele.fromLink) {
                    ele.fromLink = rootPath + ele.fromLink;
                }
                return ele;
            });
        },

        /** Get a search class for a specific type */
        getSearchClass: function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        },
        buildTreeNode: function (treeNode, rootPath, htmlNode, treeOpenLevel) {
            var ulNode = document.createElement('ul');
            for (var childKey in treeNode.c) {
                var child = treeNode.c[childKey];
                var liClass = document.createElement('li');
                var hasChildren = child.hasOwnProperty('c');
                var nodeSpecialName = (hasChildren ? 'namespace:' : 'class:') + child.p.replace(/\//g, '_');
                liClass.setAttribute('data-name', nodeSpecialName);

                // Create the node that will have the text
                var divHd = document.createElement('div');
                var levelCss = child.l - 1;
                divHd.className = hasChildren ? 'hd' : 'hd leaf';
                divHd.style.paddingLeft = (hasChildren ? (levelCss * 18) : (8 + (levelCss * 18))) + 'px';
                if (hasChildren) {
                    if (child.l <= treeOpenLevel) {
                        liClass.className = 'opened';
                    }
                    var spanIcon = document.createElement('span');
                    spanIcon.className = 'icon icon-play';
                    divHd.appendChild(spanIcon);
                }
                var aLink = document.createElement('a');
                aLink.href = rootPath + child.p + '.html';
                aLink.text = child.n;
                divHd.appendChild(aLink);
                liClass.appendChild(divHd);

                // It has children
                if (hasChildren) {
                    var divBd = document.createElement('div');
                    divBd.className = 'bd';
                    Doctum.buildTreeNode(child, rootPath, divBd, treeOpenLevel);
                    liClass.appendChild(divBd);
                }
                ulNode.appendChild(liClass);
            }
            htmlNode.appendChild(ulNode);
        }
    };

    $(function() {
        // Modify the HTML to work correctly based on the current depth
        rootPath = document.body.getAttribute('data-root-path');
        Doctum.buildTreeNode(treeJson.tree, rootPath, document.getElementById('api-tree'), treeJson.treeOpenLevel);
    });

    return root.Doctum;
})(window);

$(function() {

    {% if project.versions|length > 1 %}
    {# Enable the version switcher #}
    $('#version-switcher').on('change', function() {
        window.location = $(this).val()
    });
    {% endif %}

    {% block treejs %}

        // Toggle left-nav divs on click
        $('#api-tree .hd span').on('click', function() {
            $(this).parent().parent().toggleClass('opened');
        });

        // Expand the parent namespaces of the current page.
        var expected = $('body').attr('data-name');

        if (expected) {
            // Open the currently selected node and its parents.
            var container = $('#api-tree');
            var node = $('#api-tree li[data-name="' + expected + '"]');
            // Node might not be found when simulating namespaces
            if (node.length > 0) {
                node.addClass('active').addClass('opened');
                node.parents('li').addClass('opened');
                var scrollPos = node.offset().top - container.offset().top + container.scrollTop();
                // Position the item nearer to the top of the screen.
                scrollPos -= 200;
                container.scrollTop(scrollPos);
            }
        }

    {% endblock %}

    {% verbatim %}
        var form = $('#search-form .typeahead');
        form.typeahead({
            hint: true,
            highlight: true,
            minLength: 1
        }, {
            name: 'search',
            displayKey: 'name',
            source: function (q, cb) {
                cb(Doctum.search(q));
            }
        });

        // The selection is direct-linked when the user selects a suggestion.
        form.on('typeahead:selected', function(e, suggestion) {
            window.location = suggestion.link;
        });

        // The form is submitted when the user hits enter.
        form.keypress(function (e) {
            if (e.which == 13) {
                $('#search-form').submit();
                return true;
            }
        });

    {% endverbatim %}
});
