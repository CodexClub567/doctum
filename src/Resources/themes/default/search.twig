{% extends "layout/layout.twig" %}
{% from "macros.twig" import class_link, namespace_link, method_link, property_link %}
{% block title %}{% trans 'Search' %} | {{ parent() }}{% endblock %}
{% block body_class 'search-page' %}

{% block page_content %}

    <div class="page-header">
        <h1>{% trans 'Search' %}</h1>
    </div>

    <p>{% trans 'This page allows you to search through the API documentation for
    specific terms. Enter your search words into the box below and click
    "submit". The search will be performed on namespaces, classes, interfaces,
    traits, functions, and methods.' %}</p>

    <form class="form-inline" role="form" action="{{ path('search.html') }}">
        <div class="form-group">
            <label class="sr-only" for="search">{% trans 'Search' %}</label>
            <input type="search" class="form-control" name="search" id="search" placeholder="{% trans 'Search' %}" spellcheck="false" autocorrect="off" autocomplete="off" autocapitalize="off">
        </div>
        <button type="submit" class="btn btn-default">{% trans 'submit' %}</button>
    </form>

    <h2>{% trans 'Search Results' %}</h2>

    <div class="container-fluid">
        <ul class="search-results"></ul>
    </div>

    {{ block('js_search') }}

{% endblock %}

{% block js_search %}
    <script type="text/javascript">

        var searchTypeClasses = {
            '{{ 'Namespace'|trans|escape('js') }}': 'label-default',
            '{{ 'Class'|trans|escape('js') }}': 'label-info',
            '{{ 'Interface'|trans|escape('js') }}': 'label-primary',
            '{{ 'Trait'|trans|escape('js') }}': 'label-success',
            '{{ 'Method'|trans|escape('js') }}': 'label-danger',
            '_': 'label-warning'
        };
        /**
         * Cleans the provided term. If no term is provided, then one is
         * grabbed from the query string "search" parameter.
         */
        var cleanSearchTerm = function(term) {
            // Grab from the query string
            if (typeof term === 'undefined') {
                var name = 'search';
                var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                var results = regex.exec(location.search);
                if (results === null) {
                    return null;
                }
                term = decodeURIComponent(results[1].replace(/\+/g, " "));
            }

            return term.replace(/<(?:.|\n)*?>/gm, '');
        };
        /**
         * Get a search class for a specific type
         */
        var getSearchClass = function(type) {
            return searchTypeClasses[type] || searchTypeClasses['_'];
        };

        (function() {
            var term = cleanSearchTerm();

            if (!term) {
                $('h2').hide();
                return;
            }

            $('#search').val(term);
            var container = $('.search-results');
            var results = Doctum.search(term);
            var len = results.length;

            if (len == 0) {
                container.html('{% trans 'No results were found'%}');
                return;
            }

            for (var i = 0, text_content = ''; i < len; i++) {

                var ele = results[i];
                var contents = '<li><h2 class="clearfix">';
                var class_name = getSearchClass(ele.type);
                contents += '<a href="' + ele.link + '">' + ele.name + '</a>';
                contents += '<div class="search-type type-' + ele.type + '"><span class="pull-right label ' + class_name + '">' + ele.type + '</span></div>';
                contents += '</h2>';

                if (ele.fromName && ele.fromLink) {
                    contents += '<div class="search-from">from <a href="' + ele.fromLink + '">' + ele.fromName + '</a></div>';
                }

                contents += '<div class="search-description">';

                // Add description, decode entities, and strip wrapping quotes
                if (ele.doc) {
                    text_content = $('<p>').html(ele.doc).html();
                    contents += text_content;
                }

                contents += '</div></li>';
                container.append($(contents));
            }
        })();
    </script>
{% endblock %}
