{% extends "layout/layout.twig" %}
{% from "macros.twig" import class_link, namespace_link, method_link, property_link %}
{% block title %}{% trans 'Search' %} | {{ parent() }}{% endblock %}
{% block body_class 'search-page' %}

{% block page_content %}

    <div class="page-header">
        <h1>{% trans 'Search' %}</h1>
    </div>

    <p>{% trans 'This page allows you to search through the API documentation for
    specific terms. Enter your search words into the box below and click
    "submit". The search will be performed on namespaces, classes, interfaces,
    traits, functions, and methods.' %}</p>

    <form class="form-inline" role="form" action="{{ path('search.html') }}">
        <div class="form-group">
            <label class="sr-only" for="search">{% trans 'Search' %}</label>
            <input type="search" class="form-control" name="search" id="search" placeholder="{% trans 'Search' %}" spellcheck="false" autocorrect="off" autocomplete="off" autocapitalize="off">
        </div>
        <button type="submit" class="btn btn-default">{% trans 'submit' %}</button>
    </form>

    <h2 id="search-results-header">{% trans 'Search Results' %}</h2>

    <div class="container-fluid" id="search-results-container">
    </div>

    {{ block('js_search') }}

{% endblock %}

{% block js_search %}
    <script type="text/javascript">
        var DoctumSearch = {
            /** @var string|null */
            searchTerm: null,
            /** @var autoComplete|null */
            autoCompleteJS: null,
            searchTypeClasses: {
                '{{ 'Namespace'|trans|escape('js') }}': 'label-default',
                '{{ 'Class'|trans|escape('js') }}': 'label-info',
                '{{ 'Trait'|trans|escape('js') }}': 'label-success',
                '{{ 'Interface'|trans|escape('js') }}': 'label-primary',
                '{{ 'Method'|trans|escape('js') }}': 'label-danger',
                '{{ 'Function'|trans|escape('js') }}': 'label-danger',
                '_': 'label-warning'
            },
            longTypes: {
                'N': '{{ 'Namespace'|trans|escape('js') }}',
                'C': '{{ 'Class'|trans|escape('js') }}',
                'T': '{{ 'Trait'|trans|escape('js') }}',
                'I': '{{ 'Interface'|trans|escape('js') }}',
                'M': '{{ 'Method'|trans|escape('js') }}',
                'F': '{{ 'Function'|trans|escape('js') }}',
                '_': 'label-warning'
            },
            /**
             * Cleans the provided term. If no term is provided, then one is
             * grabbed from the query string "search" parameter.
             */
            cleanSearchTerm: function(term) {
                // Grab from the query string
                if (typeof term === 'undefined') {
                    var name = 'search';
                    var regex = new RegExp("[\\?&]" + name + "=([^&#]*)");
                    var results = regex.exec(location.search);
                    if (results === null) {
                        return null;
                    }
                    term = decodeURIComponent(results[1].replace(/\+/g, " "));
                }

                return term.replace(/<(?:.|\n)*?>/gm, '');
            },
            /**
             * Get a search class for a specific type
             */
            getSearchClass: function(type) {
                return DoctumSearch.searchTypeClasses[type] || DoctumSearch.searchTypeClasses['_'];
            },
            /**
             * Get the long type name
             */
            getLongType: function(type) {
                return DoctumSearch.longTypes[type] || DoctumSearch.longTypes['_'];
            },
            pageFullyLoaded: function (event) {// Will get fired by the main doctum.js script
                DoctumSearch.searchTerm = DoctumSearch.cleanSearchTerm();
                DoctumSearch.launchSearch();
            },
            launchSearch: function (event) {
                if (! DoctumSearch.searchTerm) {
                    document.getElementById('search-results-header').class = 'hidden';
                    // Stop the process here
                    return;
                }
                document.getElementById('search').value = DoctumSearch.searchTerm;

                // Check if the lib is loaded
                if (typeof autoComplete === 'function') {
                    DoctumSearch.bootAutoComplete();
                }
            },
            bootAutoComplete: function () {
                DoctumSearch.autoCompleteJS = new autoComplete(
                    {
                        selector: '#search',
                        searchEngine: 'loose',
                        submit: true,
                        data: {
                            src: function (q) {
                                return Doctum.loadAutoCompleteData(q);
                            },
                            keys: ['n'],// Data 'Object' key to be searched
                            cache: false, // Is not compatible with async fetch of data
                        },
                        resultsList: {
                            tag: 'ul',
                            class: 'search-results',
                            destination: '#search-results-container',
                            position: 'afterbegin',
                            maxResults: 99999,
                            noResults: false,
                        },
                        resultItem: {
                            tag: 'li',
                            class: 'search-results-result',
                            highlight: 'search-results-highlight',
                            selected: 'search-results-selected',
                            element: function (item, data) {
                                item.innerHTML = '';// Clean up the content
                                var elementH2 = document.createElement('h2');
                                elementH2.className = 'clearfix';

                                var elementLink = document.createElement('a');
                                elementLink.innerText = data.value.n;
                                elementLink.href = data.value.p;
                                elementH2.appendChild(elementLink);

                                var longType = DoctumSearch.getLongType(data.value.t);
                                var className = DoctumSearch.getSearchClass(longType);

                                var divElement = document.createElement('div');
                                divElement.className = 'search-type type-' + longType;
                                var divSpanElement = document.createElement('span');
                                divSpanElement.className = 'pull-right label ' + className;
                                divSpanElement.innerText = longType;
                                divElement.appendChild(divSpanElement);
                                elementH2.appendChild(divElement);

                                item.appendChild(elementH2);

                                if (typeof data.value.f === 'object') {
                                    var fromElement = document.createElement('div');
                                    fromElement.className = 'search-from';
                                    fromElement.innerText = '{{ 'from '|trans|escape('js') }}';
                                    var fromElementLink = document.createElement('a');
                                    fromElementLink.href = data.value.f.p;
                                    fromElementLink.innerText = data.value.f.n;
                                    fromElement.appendChild(fromElementLink);
                                    item.appendChild(fromElement);
                                }

                                var divSearchDescription = document.createElement('div');
                                divSearchDescription.className = 'search-description';
                                if (data.value.t === 'N') {// Is a namespace
                                    data.value.d = '{{ 'Namespace %s'|trans|escape('js') }}'.replace('%s', data.value.n);
                                }
                                if (typeof data.value.d === 'string') {
                                    var paragraphElement = document.createElement('p');
                                    paragraphElement.innerHTML = data.value.d;
                                    divSearchDescription.appendChild(paragraphElement);
                                }
                                item.appendChild(divSearchDescription);
                            },
                        },
                    }
                );
                DoctumSearch.autoCompleteJS.start(DoctumSearch.searchTerm);
                DoctumSearch.autoCompleteJS.unInit();// Stop the work, wait for the user to hit submit
                document.getElementById('search').addEventListener('results', function (event) {
                    if (event.detail.results.length === 0) {
                        // TODO: here
                        // container.html('{% trans 'No results were found'%}');
                    }
                });
            }
        };
    </script>
{% endblock %}
